{"version":3,"sources":["todo/TodoForm.tsx","todo/TodoItem.tsx","todo/TodoList.tsx","store/TodoModel/TodoForm.ts","store/TodoModel/TodoItem.ts","store/TodoModel/TodoList.ts","store/TodoModel/index.ts","todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["inject","props","todoInput","useRef","onSubmit","evt","preventDefault","value","current","trim","length","model","updateValue","addItem","clear","className","type","ref","tabIndex","memo","id","content","completed","complete","htmlFor","checked","onChange","e","observer","setType","checkedMount","total","showList","handleChange","target","map","todo","key","name","defaultChecked","TodoForm","types","optional","string","actions","form","TodoItem","identifier","boolean","item","updateItem","TodoList","list","array","views","self","filter","add","val","unshift","cast","uuid","find","TodoStore","todoForm","todoList","text","completeItem","setFilterType","todoStore","create","Todo","store","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05b36445.chunk.js","sourcesContent":["import { TodoFormInstance } from \"@/store/TodoModel/TodoForm\";\r\nimport { FormEvent, useRef } from \"react\";\r\nimport { inject } from 'mobx-react';\r\n\r\ninterface ITodoForm {\r\n  model: TodoFormInstance,\r\n  addItem: () => void\r\n}\r\n\r\nexport default inject('model')(function TodoForm(props:ITodoForm) {\r\n\r\n  const todoInput = useRef<HTMLInputElement | null>(null)\r\n\r\n  const reset = () => {\r\n    props.model.clear()\r\n    todoInput.current!.value = ''\r\n  }\r\n\r\n  const handleSubmit = (evt:FormEvent<HTMLElement>) => {\r\n    evt.preventDefault()\r\n    const value = todoInput.current!.value.trim()\r\n    if(value.length > 0) {\r\n      props.model.updateValue(value)\r\n      props.addItem()\r\n      reset()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"todo-form\">\r\n      <input type=\"text\" ref={todoInput}/>\r\n      <button className=\"fas fa-plus\" tabIndex={-1}></button>\r\n    </form>\r\n  );\r\n})","import { ChangeEvent, memo } from 'react';\r\n\r\ninterface ITodoItem {\r\n  id:string;\r\n  content:string;\r\n  completed:boolean;\r\n  complete: (id:string) => void;\r\n}\r\n\r\nexport default memo(function TodoItem(props:ITodoItem) {\r\n\r\n  const { \r\n    id,\r\n    content,\r\n    completed,\r\n    complete\r\n  } = props\r\n\r\n  const handleChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n    //console.log(e.target.value) // 一直是 on\r\n    complete(id)\r\n  }\r\n  return (\r\n    <label htmlFor={id}>\r\n      <li className=\"todo-item\" tabIndex={0}>\r\n        <input type=\"checkbox\" id={id} checked={completed} onChange={handleChange}/>\r\n        <span>{content}</span>\r\n      </li>\r\n    </label>\r\n  );\r\n})","import { inject, observer } from \"mobx-react\";\r\nimport { TodoListInstance } from \"@/store/TodoModel/TodoList\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { ChangeEvent } from \"react\";\r\n\r\ninterface ITodoList{\r\n  model: TodoListInstance;\r\n}\r\n\r\nexport default inject('model')(observer(function TodoList(props:ITodoList) {\r\n\r\n  const  { type, complete, setType, checkedMount, total, showList } = props.model\r\n\r\n  const handleChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n    const type = e.target.value\r\n    setType(type)\r\n  }\r\n\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {\r\n        showList.map(todo => (\r\n          <TodoItem {...todo} key={todo.id} complete={complete}/>\r\n        ))\r\n      }\r\n      <div>\r\n        Checked/Total : {checkedMount}/{total}\r\n        <div className=\"todo-filter\">\r\n          All:<input type=\"radio\" name=\"todo-filter\" value=\"all\" defaultChecked={type === 'all'} onChange={handleChange}/>\r\n          Chceked:<input type=\"radio\" name=\"todo-filter\" value=\"checked\" defaultChecked={type === 'checked'} onChange={handleChange}/>\r\n          Unchecked:<input type=\"radio\" name=\"todo-filter\" value=\"unchecked\" defaultChecked={type === 'unchecked'} onChange={handleChange}/>\r\n        </div>\r\n      </div>\r\n    </ul>\r\n  );\r\n}))","import { Instance, types } from 'mobx-state-tree'\r\n\r\nexport const TodoForm = \r\ntypes\r\n.model({\r\n  value: types.optional(types.string,'')\r\n})\r\n.actions(form => ({\r\n  updateValue(value:string) {\r\n    form.value = value\r\n  },\r\n  clear() {\r\n    form.value = ''\r\n  }\r\n}))\r\n\r\nexport type TodoFormInstance = Instance<typeof TodoForm>","import { Instance, types } from 'mobx-state-tree'\r\n\r\n// id 内容 是否完成\r\nexport const TodoItem = \r\ntypes\r\n.model({\r\n  id: types.identifier,\r\n  content: types.string,\r\n  completed: types.boolean\r\n})\r\n.actions(item => ({\r\n  updateItem() {\r\n    item.completed = true\r\n  }\r\n}))\r\n\r\nexport type TodoItemInstance = Instance<typeof TodoItem>","import { Instance, types,cast } from 'mobx-state-tree'\r\nimport { TodoItem } from './TodoItem'\r\nimport { v1 as uuid } from 'uuid'\r\n\r\nexport const TodoList = \r\ntypes\r\n.model({\r\n  list: types.array(TodoItem),\r\n  type: types.optional(types.string,'all')\r\n})\r\n.views(self => ({\r\n  get total() {\r\n    return self.list.length\r\n  },\r\n  get checkedMount() {\r\n    return self.list.filter(todo => todo.completed).length\r\n  },\r\n  get showList() {\r\n    if(self.type === 'all') return self.list\r\n    if(self.type === 'checked') {\r\n      return self.list.filter(todo => todo.completed)\r\n    }else{\r\n      return self.list.filter(todo => !todo.completed)\r\n    }\r\n  }\r\n}))\r\n.actions(self => ({\r\n  add(val:string) {\r\n    self.list.unshift(cast({\r\n      id: uuid(),\r\n      content: val,\r\n      completed: false\r\n    }))\r\n  },\r\n  complete(id:string) {\r\n    const todo = self.list.find(item => item.id === id)\r\n    if(todo) todo.completed = true\r\n  },\r\n  setType(type:string) {\r\n    self.type = type\r\n  }\r\n}))\r\n\r\nexport type TodoListInstance = Instance<typeof TodoList>","import { Instance, types } from 'mobx-state-tree'\r\nimport { TodoForm } from './TodoForm'\r\nimport { TodoList } from './TodoList'\r\n\r\n\r\nexport const TodoStore = \r\ntypes\r\n.model({\r\n  todoForm: TodoForm,\r\n  todoList: TodoList\r\n})\r\n.views(self => ({\r\n  get text() {\r\n    return self.todoForm.value\r\n  },\r\n  // get filterType() {\r\n  //   return self.todoList.type\r\n  // },\r\n  // get showTodoList() {\r\n  //   // observer 根据 injected 的 store 变化,才进行重新渲染\r\n  //   // 所以 todoForm 的 type 发生了变化, 但是不会重新进行渲染\r\n  //   // 解决方案: 把 type 字段添加到 todoList 中\r\n  //   if(this.filterType === 'all') return self.todoList.list\r\n  //   if(this.filterType === 'checked') {\r\n  //     return self.todoList.list.filter(todo => todo.completed)\r\n  //   }else{\r\n  //     return self.todoList.list.filter(todo => !todo.completed)\r\n  //   }\r\n  // }\r\n}))\r\n.actions(self => ({\r\n  addItem() {\r\n    self.todoList.add(self.text)\r\n  },\r\n  completeItem(id:string) {\r\n    self.todoList.complete(id)\r\n  },\r\n  setFilterType(type:string) {\r\n    self.todoList.setType(type)\r\n  }\r\n}))\r\n\r\nexport type TodoStoreInstance = Instance<typeof TodoStore>\r\n","import TodoForm from './TodoForm'\r\nimport TodoList from './TodoList'\r\nimport { Provider } from 'mobx-react'\r\nimport { TodoStore } from '@/store/TodoModel/index'\r\nimport './index.css'\r\n\r\nconst todoStore = TodoStore.create({\r\n  todoForm: { value: ''},\r\n  todoList: { list: [], type: 'all' }\r\n})\r\n\r\nexport default function Todo() {\r\n  return (\r\n    <Provider store={todoStore}>\r\n      <TodoForm model={todoStore.todoForm} addItem={todoStore.addItem}/>\r\n      <TodoList model={todoStore.todoList} />\r\n    </Provider>\r\n  );\r\n}","import './App.css';\nimport Todo from '@/todo/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}